name: Build and Deploy Static Site

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'static/**'
      - 'templates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'static/**'
      - 'templates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Static Site
    runs-on: ubuntu-latest
    outputs:
      site_version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      - name: Generate version
        id: version
        run: |
          VERSION=$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Install Typst
        uses: baptiste0928/cargo-install@v2
        with:
          crate: typst-cli
          version: "^0.10.0"
      
      - name: Cache Typst dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/typst
            ~/.config/typst
          key: ${{ runner.os }}-typst-${{ hashFiles('src/typst_generator/**') }}
          restore-keys: |
            ${{ runner.os }}-typst-
      
      - name: Build site
        run: cargo run --release
      
      - name: Verify build
        run: |
          # Check if key files exist
          for file in dist/index.html dist/cv.html dist/blog.html dist/projects.html; do
            if [ ! -f "$file" ]; then
              echo "Error: $file does not exist"
              exit 1
            fi
          done
          
          # Check if CSS and JS files exist
          if [ ! -d "dist/css" ] || [ ! -d "dist/js" ]; then
            echo "Error: CSS or JS directories do not exist"
            exit 1
          fi
          
          # Check if the CV PDF was generated
          if [ ! -f "dist/cv.pdf" ]; then
            echo "Error: CV PDF was not generated"
            exit 1
          fi
          
          echo "Build verification successful"
      
      - name: Add version info
        run: |
          # Add version info to the HTML files
          for file in dist/*.html; do
            sed -i "s|</body>|<div style=\"text-align:center;font-size:0.8em;color:#999;margin-top:2em;\">Version: ${{ steps.version.outputs.version }} - Built on $(date +'%Y-%m-%d %H:%M:%S')</div></body>|" $file
          done
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: static-site
          path: dist
          retention-days: 7

  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    environment:
      name: preview
      url: ${{ steps.deploy-preview.outputs.preview_url }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: static-site
          path: dist
      
      - name: Deploy to Netlify
        id: deploy-preview
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './dist'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy preview for PR #${{ github.event.pull_request.number }}"
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
          alias: pr-${{ github.event.pull_request.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5
      
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Preview deployment for this PR is ready!\n\nüîç Preview URL: ${process.env.PREVIEW_URL}\n\nVersion: ${process.env.VERSION}`
            })
        env:
          PREVIEW_URL: ${{ steps.deploy-preview.outputs.preview_url }}
          VERSION: ${{ needs.build.outputs.site_version }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://example.com
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: static-site
          path: dist
      
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: dist
          clean: true
          commit-message: "Deploy static site version ${{ needs.build.outputs.site_version }}"
      
      - name: Notify on success
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚úÖ Successfully deployed static site version ${{ needs.build.outputs.site_version }} to production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "‚úÖ *Successfully deployed static site to production*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Version:*\n${{ needs.build.outputs.site_version }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Environment:*\nProduction"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Site"
                      },
                      "url": "https://example.com"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK